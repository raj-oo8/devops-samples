name: GitHub Pages Deploy

on:
  workflow_dispatch:

env:
  # Define the output directory explicitly
  PUBLISH_DIR: src/Blazor.WebAssembly/bin/GitHubPages/net8.0/publish/wwwroot

jobs:

  #====== Build and Publish ======#
  build:
    name: Build and Publish
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Setup .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      # Step 3: Restore Dependencies
      - name: Restore Dependencies
        run: dotnet restore ./src/Blazor.WebAssembly/Blazor.WebAssembly.csproj

      # Step 4: Publish App
      - name: Publish Application
        run: |
          dotnet publish ./src/Blazor.WebAssembly/Blazor.WebAssembly.csproj -c GitHubPages -o ${{ env.PUBLISH_DIR }}
        env:
          DOTNET_ROOT: /usr/share/dotnet

      # Step 5: List Published Files for Debugging
      - name: List Published Files
        run: ls -R ${{ env.PUBLISH_DIR }}
        if: always()

      # Step 6: Upload Pages Artifact
      - name: Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.PUBLISH_DIR }}

  #====== Deploy to GitHub Pages ======#
  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
      pages: write
      id-token: write

    # Define the environment to satisfy the deploy-pages action requirements
    environment:
      name: github-pages

    steps:
      # Step 1: Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
        # The deploy-pages action automatically picks up the artifact named 'github-pages'
        # If you've named your artifact differently, specify it using the 'artifact_name' input
        # Example: artifact_name: 'published-app'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
