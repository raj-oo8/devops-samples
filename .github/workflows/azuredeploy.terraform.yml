name: Azure Terraform Provision and Deploy
on: workflow_dispatch

jobs:

  #====== Provision and Deploy ======#
  provision_and_deploy:
    name: "Provision and Deploy"
    runs-on: ubuntu-latest

    steps:
      # Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      # Login to Azure
      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      # Initialize Terraform
      - name: Terraform Init
        run: terraform init
        working-directory: ./infra

      # Create or Update Resource Group
      - name: Create or Update Resource Group
        run: |
          az group create --name ${{ vars.RESOURCE_GROUP_NAME }} --location ${{ vars.RESOURCE_LOCATION }}

      # Create Terraform variables file
      - name: Create terraform.tfvars
        run: |
          echo 'subscription_id="${{ secrets.AZURE_SUBSCRIPTION_ID }}"' > ./infra/terraform.tfvars
          echo 'resource_group_name="${{ vars.RESOURCE_GROUP_NAME }}"' >> ./infra/terraform.tfvars
          echo 'location="${{ vars.RESOURCE_LOCATION }}"' >> ./infra/terraform.tfvars
          echo 'sku_tier="${{ vars.STATIC_WEB_APP_SKU }}"' >> ./infra/terraform.tfvars

      # Import existing resources with variables
      - name: Import Static Web App
        run: terraform import azurerm_static_web_app.example /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ vars.RESOURCE_GROUP_NAME }}/providers/Microsoft.Web/staticSites/${{ vars.STATIC_WEB_APP_NAME }}
        working-directory: ./infra

      # Apply Terraform
      - name: Terraform Apply
        run: terraform apply -auto-approve -var "staticSites_name=${{ vars.STATIC_WEB_APP_NAME }}" -var "resource_group_name=${{ vars.RESOURCE_GROUP_NAME }}" -var "subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" -var "location=${{ vars.RESOURCE_LOCATION }}" -var "sku_tier=${{ vars.STATIC_WEB_APP_SKU }}"
        working-directory: ./infra

      # Get Azure Static Web App deployment token
      - name: Get Azure Static Web App deployment token
        id: get-token
        run: |
          TOKEN=$(az staticwebapp secrets list --name ${{ vars.STATIC_WEB_APP_NAME }} --resource-group ${{ vars.RESOURCE_GROUP_NAME }} --query "properties.apiKey" -o tsv)
          echo "STATIC_WEB_APP_TOKEN=$TOKEN" >> $GITHUB_ENV

      # Deploy to Azure Static Web Apps
      - name: Deploy
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ env.STATIC_WEB_APP_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: 'upload'
          app_location: '/src/Blazor.WebAssembly'
          output_location: 'wwwroot'
          app_build_command: 'dotnet publish -c Release'

      # Logout of Azure
      - name: Logout of Azure
        run: az logout
