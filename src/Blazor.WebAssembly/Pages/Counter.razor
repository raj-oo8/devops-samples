@page "/counter"
@using Microsoft.AspNetCore.SignalR.Client
@inject IConfiguration Configuration
@implements IAsyncDisposable

<PageTitle>Counter</PageTitle>
<h1>Counter</h1>
<p role="status">Current count: <FluentBadge Appearance="Appearance.Neutral">@counter</FluentBadge></p>
<FluentButton Appearance="Appearance.Accent" @onclick="IncrementCount">Click me</FluentButton>

@code {
    private int counter = 0;
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var negotiateUrl = Configuration["SignalR:Url"];

            if (!string.IsNullOrEmpty(negotiateUrl))
            {
                hubConnection = new HubConnectionBuilder()
                .WithUrl(negotiateUrl)
                .Build();

                hubConnection.On<int>("ReceiveCounter", (count) =>
                {
                    counter = count;
                    InvokeAsync(StateHasChanged);
                });

                await hubConnection.StartAsync();
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine(ex.Message);
        }
    }

    private async Task IncrementCount()
    {
        counter++;

        if (hubConnection != null && hubConnection.State == HubConnectionState.Connected)
        {
            try
            {
                await hubConnection.SendAsync("SendCounter", counter);
            }
            catch (Exception ex)
            {
                // Log the exception or handle it as needed
                Console.Error.WriteLine($"Error sending counter value: {ex.Message}");
            }
        }
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}